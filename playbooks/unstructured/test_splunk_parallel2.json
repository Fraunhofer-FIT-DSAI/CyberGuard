{
  "blockly": false,
  "blockly_xml": "<xml></xml>",
  "category": "Dynamic Analysis",
  "coa": {
    "data": {
      "description": "Accepts a URL or vault_id and does detonation analysis on the objects. Generates a global report and a per observable sub-report and normalized score. The score can be customized based on a variety of factors.\n\n",
      "edges": [
        {
          "id": "port_25_to_port_17",
          "sourceNode": "25",
          "sourcePort": "25_out",
          "targetNode": "17",
          "targetPort": "17_in"
        },
        {
          "id": "port_25_to_port_27",
          "sourceNode": "25",
          "sourcePort": "25_out",
          "targetNode": "27",
          "targetPort": "27_in"
        },
        {
          "id": "port_17_to_port_18",
          "sourceNode": "17",
          "sourcePort": "17_out",
          "targetNode": "18",
          "targetPort": "18_in"
        },
        {
          "id": "port_27_to_port_18",
          "sourceNode": "27",
          "sourcePort": "27_out",
          "targetNode": "18",
          "targetPort": "18_in"
        }
      ],
      "globalCustomCode": null,
      "hash": "74a51ccf79fc9363135cdd3b63ffe935edbeec5a",
      "nodes": {
        "17": {
          "data": {
            "advanced": {
              "customName": "normalized file summary output",
              "customNameId": 0,
              "description": "This block uses custom code for normalizing score. Adjust the logic as desired in the documented sections.",
              "join": [],
              "note": "This block uses custom code for normalizing score. Adjust the logic as desired in the documented sections."
            },
            "functionId": 5,
            "functionName": "normalized_file_summary_output",
            "id": "17",
            "inputParameters": [
              "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.parameter.file",
              "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.data.*.JobID",
              "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.parameter.job_id",
              "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.data.*.Submission.Name",
              "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.summary.Score",
              "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.data.*.Resources",
              "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.data.*.Verdict",
              "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.data.*.Tasks"
            ],
            "outputVariables": [
              "file_score_object",
              "scores",
              "categories",
              "score_id",
              "file",
              "job_id",
              "classifications",
              "file_name"
            ],
            "type": "code"
          },
          "errors": {},
          "id": "17",
          "type": "code",
          "userCode": "    \n    \n    score_table = {\n        \"0\":\"Unknown\",\n        \"1\":\"Very_Safe\",\n        \"2\":\"Safe\",\n        \"3\":\"Probably_Safe\",\n        \"4\":\"Leans_Safe\",\n        \"5\":\"May_not_be_Safe\",\n        \"6\":\"Exercise_Caution\",\n        \"7\":\"Suspicious_or_Risky\",\n        \"8\":\"Possibly_Malicious\",\n        \"9\":\"Probably_Malicious\",\n        \"10\":\"Malicious\"\n    }\n\n    classification_ids = {\n        \"Unknown\": 0,\n        \"Adware\": 1,\n        \"Backdoor\": 2,\n        \"Bot\": 3,\n        \"Bootkit\": 4,\n        \"DDOS\": 5,\n        \"Downloader\": 6,\n        \"Dropper\": 7,\n        \"Exploit-Kit\": 8,\n        \"Keylogger\": 9,\n        \"Ransomware\": 10,\n        \"Remote-Access-Trojan\": 11,\n        \"Resource-Exploitation\": 13,\n        \"Rogue-Security-Software\": 14,\n        \"Rootkit\": 15,\n        \"Screen-Capture\": 16,\n        \"Spyware\": 17,\n        \"Trojan\": 18,\n        \"Virus\": 19,\n        \"Webshell\": 20,\n        \"Wiper\": 21,\n        \"Worm\": 22,\n        \"Other\": 99\n    }\n\n    normalized_file_summary_output__file_score_object = []\n    normalized_file_summary_output__scores = []\n    normalized_file_summary_output__categories = []\n    normalized_file_summary_output__score_id = []\n    normalized_file_summary_output__file = []\n    normalized_file_summary_output__job_id = []\n    normalized_file_summary_output__classifications = []\n    normalized_file_summary_output__file_name = []\n    \n    \n    def find_sha1_details(target_id, task_list):\n        '''\n        Attempt to find the detail object with a sha1\n        '''\n        for task in task_list:\n            if (target_id == task.get('ResourceID')\n                and task.get('Results',{}).get('Details', {}).get('sha1')):\n                task_result_details = task['Results']['Details']\n                task_result_details.pop('RootTaskID', None)\n                return task_result_details\n        return None\n\n        \n    ## pair forensic job results with url detonated\n    job_file_dict = {}\n    for orig_file, orig_job, filtered_job in zip(filtered_result_0_parameter_file, filtered_result_0_data___jobid, filtered_result_1_parameter_job_id):\n        if orig_job == filtered_job:\n            job_file_dict[filtered_job] = orig_file\n    \n    for job, file_name, score_num, resources, verdict, tasks in zip(\n        filtered_result_1_parameter_job_id, \n        filtered_result_1_data___submission_name, \n        filtered_result_1_summary_score, \n        filtered_result_1_data___resources, \n        filtered_result_1_data___verdict,\n        filtered_result_1_data___tasks\n    ):\n        \n        ## translate scores\n        score_id = int(score_num/10) if score_num > 0 else 0\n        score = score_table[str(score_id)]\n        file = job_file_dict[job]\n        attributes = {}\n        \n        ## build.a sub dictionary of high priority related observables\n        related_observables = []\n        for sub_observ in resources:\n            if sub_observ['Name'] != file_name:\n                        \n                details = find_sha1_details(sub_observ['ID'], tasks)\n                second_num = sub_observ['DisplayScore']\n                second_num_id = int(second_num/10) if second_num > 0 else 0\n                sub_observ_dict = {\n                    'value': sub_observ['Name'],\n                    'type': sub_observ['Type'].lower(),\n                    'reputation': {\n                        'score': score_table[str(second_num_id)],\n                        'orig_score': second_num,\n                        'score_id': second_num_id\n                    },\n                    'source': 'Splunk Attack Analyzer'\n                }\n                if details:\n                    details['name'] = sub_observ['Name']\n                    details.pop('exiftool', None)\n                    sub_observ_dict['attributes'] = details\n                # check if observ is already in related_observables\n                skip_observ = False\n                for idx, item in enumerate(related_observables):\n                    if (sub_observ.get('FileMetadata', {}).get('SHA256', 'null_one') \n                        == item.get('attributes', {}).get('sha256', 'null_two')\n                        and sub_observ['DisplayScore'] > item['reputation']['orig_score']):\n                        related_observables[idx] = sub_observ_dict\n                        skip_observ = True\n                    elif sub_observ['Name'] == item['value']:\n                        skip_observ = True\n                if not skip_observ:\n                    related_observables.append(sub_observ_dict)\n            elif sub_observ['Name'] == file_name:\n                details = find_sha1_details(sub_observ['ID'], tasks)\n                if details:\n                    details.pop('exiftool', None)\n                    details['name'] = file_name\n                    attributes = details\n                else:\n                    file_metadata = sub_observ.get('FileMetadata', {})\n                    attributes = {\n                        'name': file_name,\n                        'sha256': file_metadata.get('SHA256'),\n                        'md5': file_metadata.get('MD5'),\n                        'size': file_metadata.get('Size')\n                    }\n                    if file_metadata.get('MimeType'):\n                        attributes['mime_type'] = file_metadata['MimeType']\n        \n        normalized_file_summary_output__file_score_object.append({\n            'value': file, \n            'orig_score': score_num, \n            'score': score, \n            'score_id': score_id, \n            'classifications': [verdict if verdict else \"Unknown\"],\n            'classification_ids': [classification_ids.get(verdict, 99) if verdict else 0],\n            'related_observables': related_observables,\n            'attributes': attributes\n                \n        })\n        normalized_file_summary_output__scores.append(score)\n        normalized_file_summary_output__score_id.append(score_id)\n        normalized_file_summary_output__file.append(file)\n        normalized_file_summary_output__file_name.append(file_name)\n        normalized_file_summary_output__job_id.append(job)\n        normalized_file_summary_output__classifications.append([verdict if verdict else \"Unknown\"])\n    \n    \n",
          "warnings": {},
          "x": 340,
          "y": 1440
        },
        "18": {
          "data": {
            "advanced": {
              "customName": "format file report ",
              "customNameId": 0,
              "description": "Format a summary table with the information gathered from the playbook.",
              "drop_none": true,
              "join": [],
              "note": "Format a summary table with the information gathered from the playbook."
            },
            "functionId": 2,
            "functionName": "format_file_report",
            "id": "18",
            "parameters": [
              "normalized_file_summary_output:custom_function:file_name",
              "normalized_file_summary_output:custom_function:scores",
              "normalized_file_summary_output:custom_function:score_id",
              "normalized_file_summary_output:custom_function:classifications",
              "normalized_file_summary_output:custom_function:job_id",
              "file_screenshot_formatting:custom_function:report",
              "get_file_summary_output:action_result.summary.AppURL"
            ],
            "template": "SOAR analyzed File(s) using Splunk Attack Analyzer.  The table below shows a summary of the information gathered.\n\n| File Name | Normalized Score | Score Id  | Classifications | Report Link | Source |\n| --- | --- | --- | --- | --- | --- |\n%%\n| `{0}` | {1} | {2} | {3} | {6} | Splunk Attack Analyzer (SAA) |\n%%\n\nScreenshots associated with the detonated Files are shown below (if available):\n\n{5}\n\n",
            "type": "format"
          },
          "errors": {},
          "id": "18",
          "type": "format",
          "userCode": "\n    # Write your custom code here...\n    #phantom.debug(phantom.format(container=container, template=template, parameters=parameters, name=\"format_report_file\"))\n",
          "warnings": {},
          "x": 340,
          "y": 1638
        },
        "25": {
          "data": {
            "action": "get job screenshots",
            "actionType": "investigate",
            "advanced": {
              "customName": "get file job screenshots",
              "customNameId": 0,
              "description": "Add the job screenshots to the vault",
              "join": [],
              "note": "Add the job screenshots to the vault"
            },
            "connector": "Splunk Attack Analyzer Connector for Splunk SOAR",
            "connectorConfigs": ["splunk_attack_analyzer"],
            "connectorId": "de681fee-c552-45bf-9212-827b1c7529f8",
            "connectorVersion": "v1",
            "functionId": 2,
            "functionName": "get_file_job_screenshots",
            "id": "25",
            "loop": {
              "enabled": false,
              "exitAfterUnit": "m",
              "exitAfterValue": 10,
              "exitConditionEnabled": false,
              "exitLoopAfter": 2,
              "pauseUnit": "m",
              "pauseValue": 2
            },
            "parameters": {
              "job_id": "filtered-data:file_summary_filter:condition_1:get_file_summary_output:action_result.parameter.job_id"
            },
            "requiredParameters": [
              {
                "data_type": "string",
                "field": "job_id"
              }
            ],
            "type": "action"
          },
          "errors": {},
          "id": "25",
          "type": "action",
          "warnings": {},
          "x": 340,
          "y": 1220
        },
        "27": {
          "data": {
            "advanced": {
              "customName": "file screenshot formatting",
              "customNameId": 0,
              "description": "Custom formatting for the markdown report that shows screenshots grouped by detonated file.",
              "join": [],
              "note": "Custom formatting for the markdown report that shows screenshots grouped by detonated file"
            },
            "functionId": 4,
            "functionName": "file_screenshot_formatting",
            "id": "27",
            "inputParameters": [
              "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.parameter.file",
              "filtered-data:detonation_status_filter:condition_1:file_detonation:action_result.data.*.JobID",
              "get_file_job_screenshots:action_result.parameter.job_id",
              "get_file_job_screenshots:action_result.data.*.file_name",
              "get_file_job_screenshots:action_result.data.*.id"
            ],
            "outputVariables": ["report"],
            "type": "code"
          },
          "errors": {},
          "id": "27",
          "type": "code",
          "userCode": "\n    file_screenshot_formatting__report = \"\"\n    \n    for file, job_id in zip(filtered_result_0_parameter_file, filtered_result_0_data___jobid):\n        file_screenshot_formatting__report += f\"#### {file}\\n\"\n        for screenshot_job, screenshot_name, screenshot_id in zip(get_file_job_screenshots_parameter_job_id, get_file_job_screenshots_result_item_1, get_file_job_screenshots_result_item_2):\n            if job_id == screenshot_job:\n                file_screenshot_formatting__report += f\"![{screenshot_name}](/view?id={screenshot_id})\\n\"\n\n",
          "warnings": {},
          "x": 680,
          "y": 1440
        }
      },
      "notes": "Inputs: url,  vault_id\nInteractions: Splunk Attack Analyzer\nActions: url detonation, , file detonation\nOutputs: report, observables"
    },
    "input_spec": [
      {
        "contains": ["url"],
        "description": "A URL provided for reputation analysis - Splunk Attack Analyzer",
        "name": "url"
      },
      {
        "contains": ["vault id"],
        "description": "A vault_id provided for reputation analysis - Splunk Attack Analyzer",
        "name": "vault_id"
      }
    ],
    "output_spec": [
      {
        "contains": [],
        "datapaths": [
          "build_url_output:custom_function:observable_array",
          "build_file_output:custom_function:observable_array"
        ],
        "deduplicate": false,
        "description": "An array of observable dictionaries with value, type, score, score_id, and categories.",
        "metadata": {},
        "name": "observable"
      },
      {
        "contains": [],
        "datapaths": [
          "format_url_report:formatted_data",
          "format_file_report:formatted_data"
        ],
        "deduplicate": false,
        "description": "a report contains value, score, confidence and categories",
        "metadata": {},
        "name": "report"
      }
    ],
    "playbook_type": "data",
    "python_version": "3",
    "schema": "5.0.11",
    "version": "6.2.0.355"
  },
  "create_time": "2024-03-19T15:17:38.130754+00:00",
  "draft_mode": false,
  "labels": ["*"],
  "tags": [
    "url",
    "ip",
    "domain",
    "sandbox",
    "D3-DA",
    "vault_id",
    "splunk_attack_analyzer"
  ]
}
